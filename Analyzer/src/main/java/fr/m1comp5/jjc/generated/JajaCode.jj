/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. JajaCode.jj */
/*@egen*/options {
    STATIC = false;
                             
                 
                   
                                                                    
                                                                       
                        
}

PARSER_BEGIN(JajaCode)
package fr.m1comp5.jjc.generated;

public class JajaCode/*@bgen(jjtree)*/implements JajaCodeTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTJajaCodeState jjtree = new JJTJajaCodeState();

/*@egen*/
}
PARSER_END(JajaCode)

/* To skip */
SKIP :
{
    " "                                              |
    "\t"                                             |
    "\r"                                             |
    "\n"
 }

/* JajaCode instructions */
<DEFAULT> TOKEN :
{
    <INIT: "init">        |
    <SWAP: "swap">        |
    <NEW: "new">          |
    <NEWA: "newarray">    |
    <INVOKE: "invoke">    |
    <LENGTH: "length">    |
    <RETURN: "return">    |
    <WRITE: "write">      |
    <WRITELN: "writeln">  |
    <PUSH: "push">        |
    <POP: "pop">          |
    <LOAD: "load">        |
    <ALOAD: "aload">      |
    <STORE: "store">      |
    <ASTORE: "astore">    |
    <IF: "if">            |
    <GOTO: "goto">        |
    <INC: "inc">          |
    <AINC: "ainc">        |
    <NOP: "nop">          |
    <JCSTOP: "jcstop">
}

/* JajaCode operations */
<DEFAULT> TOKEN :
{
    <NEG: "neg"> |
    <NOT: "not"> |
    <ADD: "add"> |
    <SUB: "sub"> |
    <MUL: "mul"> |
    <DIV: "div"> |
    <CMP: "cmp"> |
    <SUP: "sup"> |
    <OR: "or">   |
    <AND: "and">
}

/* JajaCode separators */
<DEFAULT> TOKEN :
{
    <SEMICOLON: ";">    |
    <COMMA: "," >       |
    <LPAR: "(">         |
    <RPAR: ")">
}

/* JajaCode types */
<DEFAULT> TOKEN :
{
    <INT: "entier">     |
    <BOOL: "booleen">   |
    <VOID: "void">
}

/* JajaCode object types */
<DEFAULT> TOKEN :
{
    <VAR: "var">    |
    <CST: "cst">    |
    <METH: "meth">
}

/* JajaCode values */
<DEFAULT> TOKEN :
{
    <TRUE: "vrai">                                                       |
    <FALSE: "faux">                                                     |
    <IDENTIFIER: ["a"-"z", "A"-"Z"] (["a"-"z", "A"-"Z", "0"-"9", "_"])*> |
    <NUMBER: (["0"-"9"])+>                                               |
    <STRING:  "\"" (~["\""])* "\"">
}

public SimpleNode start()       : {/*@bgen(jjtree) Root */
  ASTRoot jjtn000 = new ASTRoot(JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Root */
    try {
/*@egen*/
    classe()/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
               jjtn000.jjtSetLastToken(getToken(0));
             }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

private void classe() : {}
{
    adresse() instr() <SEMICOLON>/*@bgen(jjtree) #JajaCode( 3) */
                                  {
                                    ASTJajaCode jjtn001 = new ASTJajaCode(JJTJAJACODE);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                    jjtn001.jjtSetFirstToken(getToken(1));
                                  }
                                  try {
/*@egen*/ classe()/*@bgen(jjtree)*/
                                  } catch (Throwable jjte001) {
                                    if (jjtc001) {
                                      jjtree.clearNodeScope(jjtn001);
                                      jjtc001 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte001 instanceof RuntimeException) {
                                      throw (RuntimeException)jjte001;
                                    }
                                    if (jjte001 instanceof ParseException) {
                                      throw (ParseException)jjte001;
                                    }
                                    throw (Error)jjte001;
                                  } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001,  3);
                                      jjtn001.jjtSetLastToken(getToken(0));
                                    }
                                  }
/*@egen*/              |/*@bgen(jjtree) Jcnil */
    {
      ASTJcnil jjtn002 = new ASTJcnil(JJTJCNIL);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtn002.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    empty()/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
        jjtn002.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/       
}

private void instr() : {}
{/*@bgen(jjtree) Init */
    {
      ASTInit jjtn001 = new ASTInit(JJTINIT);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    <INIT>/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/                                                                               |/*@bgen(jjtree) Swap */
    {
      ASTSwap jjtn002 = new ASTSwap(JJTSWAP);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtn002.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    <SWAP>/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
        jjtn002.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/                                                                               |
    <NEW> <LPAR> ident() <COMMA> type() <COMMA> sorte() <COMMA> adresse()/*@bgen(jjtree) #New( 4) */
                                                                          {
                                                                            ASTNew jjtn003 = new ASTNew(JJTNEW);
                                                                            boolean jjtc003 = true;
                                                                            jjtree.openNodeScope(jjtn003);
                                                                            jjtn003.jjtSetFirstToken(getToken(1));
                                                                          }
                                                                          try {
/*@egen*/ <RPAR>/*@bgen(jjtree)*/
                                                                          } finally {
                                                                            if (jjtc003) {
                                                                              jjtree.closeNodeScope(jjtn003,  4);
                                                                              jjtn003.jjtSetLastToken(getToken(0));
                                                                            }
                                                                          }
/*@egen*/         |
    <NEWA> <LPAR> ident() <COMMA> type()/*@bgen(jjtree) #NewArray( 2) */
                                         {
                                           ASTNewArray jjtn004 = new ASTNewArray(JJTNEWARRAY);
                                           boolean jjtc004 = true;
                                           jjtree.openNodeScope(jjtn004);
                                           jjtn004.jjtSetFirstToken(getToken(1));
                                         }
                                         try {
/*@egen*/ <RPAR>/*@bgen(jjtree)*/
                                         } finally {
                                           if (jjtc004) {
                                             jjtree.closeNodeScope(jjtn004,  2);
                                             jjtn004.jjtSetLastToken(getToken(0));
                                           }
                                         }
/*@egen*/                                          |
    <INVOKE> <LPAR> ident()/*@bgen(jjtree) #Invoke( 1) */
                            {
                              ASTInvoke jjtn005 = new ASTInvoke(JJTINVOKE);
                              boolean jjtc005 = true;
                              jjtree.openNodeScope(jjtn005);
                              jjtn005.jjtSetFirstToken(getToken(1));
                            }
                            try {
/*@egen*/ <RPAR>/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc005) {
                                jjtree.closeNodeScope(jjtn005,  1);
                                jjtn005.jjtSetLastToken(getToken(0));
                              }
                            }
/*@egen*/                                                       |
    <LENGTH> <LPAR> ident()/*@bgen(jjtree) #Length( 1) */
                            {
                              ASTLength jjtn006 = new ASTLength(JJTLENGTH);
                              boolean jjtc006 = true;
                              jjtree.openNodeScope(jjtn006);
                              jjtn006.jjtSetFirstToken(getToken(1));
                            }
                            try {
/*@egen*/ <RPAR>/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc006) {
                                jjtree.closeNodeScope(jjtn006,  1);
                                jjtn006.jjtSetLastToken(getToken(0));
                              }
                            }
/*@egen*/                                                       |/*@bgen(jjtree) Return */
    {
      ASTReturn jjtn007 = new ASTReturn(JJTRETURN);
      boolean jjtc007 = true;
      jjtree.openNodeScope(jjtn007);
      jjtn007.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    <RETURN>/*@bgen(jjtree)*/
    } finally {
      if (jjtc007) {
        jjtree.closeNodeScope(jjtn007, true);
        jjtn007.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/                                                                             |/*@bgen(jjtree) Write */
    {
      ASTWrite jjtn008 = new ASTWrite(JJTWRITE);
      boolean jjtc008 = true;
      jjtree.openNodeScope(jjtn008);
      jjtn008.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    <WRITE>/*@bgen(jjtree)*/
    } finally {
      if (jjtc008) {
        jjtree.closeNodeScope(jjtn008, true);
        jjtn008.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/                                                                              |/*@bgen(jjtree) WriteLn */
    {
      ASTWriteLn jjtn009 = new ASTWriteLn(JJTWRITELN);
      boolean jjtc009 = true;
      jjtree.openNodeScope(jjtn009);
      jjtn009.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    <WRITELN>/*@bgen(jjtree)*/
    } finally {
      if (jjtc009) {
        jjtree.closeNodeScope(jjtn009, true);
        jjtn009.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/                                                                            |
    <PUSH> <LPAR> value()/*@bgen(jjtree) #Push( 1) */
                          {
                            ASTPush jjtn010 = new ASTPush(JJTPUSH);
                            boolean jjtc010 = true;
                            jjtree.openNodeScope(jjtn010);
                            jjtn010.jjtSetFirstToken(getToken(1));
                          }
                          try {
/*@egen*/ <RPAR>/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc010) {
                              jjtree.closeNodeScope(jjtn010,  1);
                              jjtn010.jjtSetLastToken(getToken(0));
                            }
                          }
/*@egen*/                                                         |/*@bgen(jjtree) Pop */
    {
      ASTPop jjtn011 = new ASTPop(JJTPOP);
      boolean jjtc011 = true;
      jjtree.openNodeScope(jjtn011);
      jjtn011.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    <POP>/*@bgen(jjtree)*/
    } finally {
      if (jjtc011) {
        jjtree.closeNodeScope(jjtn011, true);
        jjtn011.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/                                                                                |
    <LOAD> <LPAR> ident()/*@bgen(jjtree) #Load( 1) */
                          {
                            ASTLoad jjtn012 = new ASTLoad(JJTLOAD);
                            boolean jjtc012 = true;
                            jjtree.openNodeScope(jjtn012);
                            jjtn012.jjtSetFirstToken(getToken(1));
                          }
                          try {
/*@egen*/ <RPAR>/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc012) {
                              jjtree.closeNodeScope(jjtn012,  1);
                              jjtn012.jjtSetLastToken(getToken(0));
                            }
                          }
/*@egen*/                                                         |
    <ALOAD> <LPAR> ident()/*@bgen(jjtree) #ALoad( 1) */
                           {
                             ASTALoad jjtn013 = new ASTALoad(JJTALOAD);
                             boolean jjtc013 = true;
                             jjtree.openNodeScope(jjtn013);
                             jjtn013.jjtSetFirstToken(getToken(1));
                           }
                           try {
/*@egen*/ <RPAR>/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc013) {
                               jjtree.closeNodeScope(jjtn013,  1);
                               jjtn013.jjtSetLastToken(getToken(0));
                             }
                           }
/*@egen*/                                                        |
    <STORE> <LPAR> ident()/*@bgen(jjtree) #Store( 1) */
                           {
                             ASTStore jjtn014 = new ASTStore(JJTSTORE);
                             boolean jjtc014 = true;
                             jjtree.openNodeScope(jjtn014);
                             jjtn014.jjtSetFirstToken(getToken(1));
                           }
                           try {
/*@egen*/ <RPAR>/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc014) {
                               jjtree.closeNodeScope(jjtn014,  1);
                               jjtn014.jjtSetLastToken(getToken(0));
                             }
                           }
/*@egen*/                                                        |
    <ASTORE> <LPAR> ident()/*@bgen(jjtree) #AStore( 1) */
                            {
                              ASTAStore jjtn015 = new ASTAStore(JJTASTORE);
                              boolean jjtc015 = true;
                              jjtree.openNodeScope(jjtn015);
                              jjtn015.jjtSetFirstToken(getToken(1));
                            }
                            try {
/*@egen*/ <RPAR>/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc015) {
                                jjtree.closeNodeScope(jjtn015,  1);
                                jjtn015.jjtSetLastToken(getToken(0));
                              }
                            }
/*@egen*/                                                       |
    <IF> <LPAR> adresse()/*@bgen(jjtree) #If( 1) */
                          {
                            ASTIf jjtn016 = new ASTIf(JJTIF);
                            boolean jjtc016 = true;
                            jjtree.openNodeScope(jjtn016);
                            jjtn016.jjtSetFirstToken(getToken(1));
                          }
                          try {
/*@egen*/ <RPAR>/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc016) {
                              jjtree.closeNodeScope(jjtn016,  1);
                              jjtn016.jjtSetLastToken(getToken(0));
                            }
                          }
/*@egen*/                                                         |
    <GOTO> <LPAR> adresse()/*@bgen(jjtree) #GoTo( 1) */
                            {
                              ASTGoTo jjtn017 = new ASTGoTo(JJTGOTO);
                              boolean jjtc017 = true;
                              jjtree.openNodeScope(jjtn017);
                              jjtn017.jjtSetFirstToken(getToken(1));
                            }
                            try {
/*@egen*/ <RPAR>/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc017) {
                                jjtree.closeNodeScope(jjtn017,  1);
                                jjtn017.jjtSetLastToken(getToken(0));
                              }
                            }
/*@egen*/                                                       |
    <INC> <LPAR> ident()/*@bgen(jjtree) #Inc( 1) */
                         {
                           ASTInc jjtn018 = new ASTInc(JJTINC);
                           boolean jjtc018 = true;
                           jjtree.openNodeScope(jjtn018);
                           jjtn018.jjtSetFirstToken(getToken(1));
                         }
                         try {
/*@egen*/ <RPAR>/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc018) {
                             jjtree.closeNodeScope(jjtn018,  1);
                             jjtn018.jjtSetLastToken(getToken(0));
                           }
                         }
/*@egen*/                                                          |
    <AINC> <LPAR> ident()/*@bgen(jjtree) #AInc( 1) */
                          {
                            ASTAInc jjtn019 = new ASTAInc(JJTAINC);
                            boolean jjtc019 = true;
                            jjtree.openNodeScope(jjtn019);
                            jjtn019.jjtSetFirstToken(getToken(1));
                          }
                          try {
/*@egen*/ <RPAR>/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc019) {
                              jjtree.closeNodeScope(jjtn019,  1);
                              jjtn019.jjtSetLastToken(getToken(0));
                            }
                          }
/*@egen*/                                                         |/*@bgen(jjtree) Nop */
    {
      ASTNop jjtn020 = new ASTNop(JJTNOP);
      boolean jjtc020 = true;
      jjtree.openNodeScope(jjtn020);
      jjtn020.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    <NOP>/*@bgen(jjtree)*/
    } finally {
      if (jjtc020) {
        jjtree.closeNodeScope(jjtn020, true);
        jjtn020.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/                                                                                |/*@bgen(jjtree) JcStop */
    {
      ASTJcStop jjtn021 = new ASTJcStop(JJTJCSTOP);
      boolean jjtc021 = true;
      jjtree.openNodeScope(jjtn021);
      jjtn021.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    <JCSTOP>/*@bgen(jjtree)*/
    } finally {
      if (jjtc021) {
        jjtree.closeNodeScope(jjtn021, true);
        jjtn021.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/                                                                             |
    oper()
}

private void ident()          : {/*@bgen(jjtree) JcIdent */
                                 ASTJcIdent jjtn000 = new ASTJcIdent(JJTJCIDENT);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
                                 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) JcIdent */
    try {
/*@egen*/
    t = <IDENTIFIER>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.jjtSetLastToken(getToken(0));
                     }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

private void value() : {}
{
    number()     |
    trueValue()  |
    falseValue() |
    string()     |/*@bgen(jjtree) Jcnil */
    {
      ASTJcnil jjtn001 = new ASTJcnil(JJTJCNIL);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    empty()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/       
}

private void adresse() : {Token t;}
{
    number()
}

private void oper() : {}
{
    oper1() |
    oper2()
}

private void oper1() : {}
{/*@bgen(jjtree) Neg */
    {
      ASTNeg jjtn001 = new ASTNeg(JJTNEG);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    <NEG>/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/      |/*@bgen(jjtree) Not */
    {
      ASTNot jjtn002 = new ASTNot(JJTNOT);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtn002.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    <NOT>/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
        jjtn002.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/     
}

private void oper2() : {}
{/*@bgen(jjtree) Add */
    {
      ASTAdd jjtn001 = new ASTAdd(JJTADD);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    <ADD>/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/      |/*@bgen(jjtree) Sub */
    {
      ASTSub jjtn002 = new ASTSub(JJTSUB);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtn002.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    <SUB>/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
        jjtn002.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/      |/*@bgen(jjtree) Mul */
    {
      ASTMul jjtn003 = new ASTMul(JJTMUL);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
      jjtn003.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    <MUL>/*@bgen(jjtree)*/
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
        jjtn003.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/      |/*@bgen(jjtree) Div */
    {
      ASTDiv jjtn004 = new ASTDiv(JJTDIV);
      boolean jjtc004 = true;
      jjtree.openNodeScope(jjtn004);
      jjtn004.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    <DIV>/*@bgen(jjtree)*/
    } finally {
      if (jjtc004) {
        jjtree.closeNodeScope(jjtn004, true);
        jjtn004.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/      |/*@bgen(jjtree) Cmp */
    {
      ASTCmp jjtn005 = new ASTCmp(JJTCMP);
      boolean jjtc005 = true;
      jjtree.openNodeScope(jjtn005);
      jjtn005.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    <CMP>/*@bgen(jjtree)*/
    } finally {
      if (jjtc005) {
        jjtree.closeNodeScope(jjtn005, true);
        jjtn005.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/      |/*@bgen(jjtree) Sup */
    {
      ASTSup jjtn006 = new ASTSup(JJTSUP);
      boolean jjtc006 = true;
      jjtree.openNodeScope(jjtn006);
      jjtn006.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    <SUP>/*@bgen(jjtree)*/
    } finally {
      if (jjtc006) {
        jjtree.closeNodeScope(jjtn006, true);
        jjtn006.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/      |/*@bgen(jjtree) Or */
    {
      ASTOr jjtn007 = new ASTOr(JJTOR);
      boolean jjtc007 = true;
      jjtree.openNodeScope(jjtn007);
      jjtn007.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    <OR>/*@bgen(jjtree)*/
    } finally {
      if (jjtc007) {
        jjtree.closeNodeScope(jjtn007, true);
        jjtn007.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/       |/*@bgen(jjtree) And */
    {
      ASTAnd jjtn008 = new ASTAnd(JJTAND);
      boolean jjtc008 = true;
      jjtree.openNodeScope(jjtn008);
      jjtn008.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    <AND>/*@bgen(jjtree)*/
    } finally {
      if (jjtc008) {
        jjtree.closeNodeScope(jjtn008, true);
        jjtn008.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/     
}

private void type()       : {/*@bgen(jjtree) Type */
                             ASTType jjtn000 = new ASTType(JJTTYPE);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
                             jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) Type */
    try {
/*@egen*/
    t = <INT>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.jjtSetLastToken(getToken(0));
               }
/*@egen*/  {jjtn000.value = t.image;} |
    t = <BOOL>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.jjtSetLastToken(getToken(0));
               }
/*@egen*/ {jjtn000.value = t.image;} |
    t = <VOID>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.jjtSetLastToken(getToken(0));
               }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/

}

private void sorte()        : {/*@bgen(jjtree) Sorte */
                               ASTSorte jjtn000 = new ASTSorte(JJTSORTE);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
                               jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) Sorte */
    try {
/*@egen*/
    t = <VAR>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.jjtSetLastToken(getToken(0));
               }
/*@egen*/  {jjtn000.value = t.image;} |
    t = <CST>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.jjtSetLastToken(getToken(0));
              }
/*@egen*/ {jjtn000.value = t.image;} |
    t = <METH>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.jjtSetLastToken(getToken(0));
               }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

private void number()         : {/*@bgen(jjtree) JcNbre */
                                 ASTJcNbre jjtn000 = new ASTJcNbre(JJTJCNBRE);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
                                 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/int x = 0; Token t;}
{/*@bgen(jjtree) JcNbre */
    try {
/*@egen*/
    t = <NUMBER>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
        try
        {
            x = Integer.parseInt(t.image);
        }
        catch (Exception e)
        {
            System.err.println(e.getMessage());
        }
        jjtn000.value = x;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

private void trueValue()         : {/*@bgen(jjtree) JcVrai */
                                    ASTJcVrai jjtn000 = new ASTJcVrai(JJTJCVRAI);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);
                                    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/boolean x = true;}
{/*@bgen(jjtree) JcVrai */
    try {
/*@egen*/
    <TRUE>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             jjtn000.jjtSetLastToken(getToken(0));
           }
/*@egen*/ {jjtn000.jjtSetValue(x);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

private void falseValue()          : {/*@bgen(jjtree) JcFalse */
                                      ASTJcFalse jjtn000 = new ASTJcFalse(JJTJCFALSE);
                                      boolean jjtc000 = true;
                                      jjtree.openNodeScope(jjtn000);
                                      jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/boolean x = false;}
{/*@bgen(jjtree) JcFalse */
    try {
/*@egen*/
    <FALSE>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.jjtSetLastToken(getToken(0));
            }
/*@egen*/ {jjtn000.jjtSetValue(x);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

private void string()           : {/*@bgen(jjtree) JcChaine */
                                   ASTJcChaine jjtn000 = new ASTJcChaine(JJTJCCHAINE);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);
                                   jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) JcChaine */
    try {
/*@egen*/
    t = <STRING>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.jjtSetLastToken(getToken(0));
                 }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

private void empty() : {}
{
    {}
}