/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. .\MiniJaja.jj */
/*@egen*/options {
    STATIC = false;
                             
                 
                   
}

PARSER_BEGIN(MiniJaja)
package fr.m1comp5.Analyzer.mjj.generated;

import org.javacc.jjtree.JJTreeParserConstants;public class MiniJaja/*@bgen(jjtree)*/implements MiniJajaTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTMiniJajaState jjtree = new JJTMiniJajaState();

/*@egen*/
}
PARSER_END(MiniJaja)

/* To skip */
SKIP :
{
    " "                                              |
    "\t"                                             |
    "\r"                                             |
    "\n"                                             |
    <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>        |
    <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">

 }

/* MiniJaja reserved keywords */
<DEFAULT> TOKEN :
{
    <CLASS: "class">     |
    <MAIN: "main">       |
    <VOID: "void">       |
    <INT: "int">         |
    <BOOLEAN: "boolean"> |
    <FINAL: "final">     |
    <TRUE: "true">       |
    <FALSE: "false">     |
    <LENGTH: "length">   |
    <WHILE: "while">     |
    <RETURN: "return">   |
    <WRITE: "write">     |
    <WRITELN: "writeln"> |
    <IF : "if">          |
    <ELSE : "else">
}

/* MiniJaja operator */
<DEFAULT> TOKEN :
{
    <ADD: "+">                  |
    <SUB: "-">                  |
    <DIV: "/">                  |
    <MUL: "*">                  |
    <SUP: ">">                  |
    <INF: "<">                  |
    <AND: "&&">                 |
    <OR: "||">                  |
    <EQUAL: "==">               |
    <NOT: "!">                  |
    <INCREMENT : "++">          |
    <ASSIGN_INCREMENT : "+=">   |
    <ASSIGN: "=">
}

/* MiniJaja Separator */
<DEFAULT> TOKEN :
{
    <SEMICOLON: ";">    |
    <COMMA: "," >       |
    <LCBRACKET: "{">    |
    <RCBRACKET: "}">    |
    <LPAR: "(">         |
    <RPAR: ")">         |
    <LBRACKET: "[">     |
    <RBRACKET: "]">
}

<DEFAULT> TOKEN :
{
    <IDENTIFIER: ["a"-"z", "A"-"Z"] (["a"-"z", "A"-"Z", "0"-"9", "_"])*> |
    <NUMBER: (["0"-"9"])+>                                               |
    <STRING:  "\"" (~["\""])* "\"">
}

public SimpleNode start()       : {/*@bgen(jjtree) Root */
  ASTRoot jjtn000 = new ASTRoot(JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Root */
    try {
/*@egen*/
    classe()/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

private void classe()         : {/*@bgen(jjtree) Classe */
  ASTClasse jjtn000 = new ASTClasse(JJTCLASSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Classe */
    try {
/*@egen*/
    <CLASS> ident() <LCBRACKET> decls() methmain() <RCBRACKET>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

private void ident()        : {/*@bgen(jjtree) Ident */
                               ASTIdent jjtn000 = new ASTIdent(JJTIDENT);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Ident */
    try {
/*@egen*/
    t = <IDENTIFIER>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

private void decls()        : {/*@bgen(jjtree) Decls */
  ASTDecls jjtn000 = new ASTDecls(JJTDECLS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Decls */
    try {
/*@egen*/
    decl() <SEMICOLON> decls() |
    empty()/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {Node ln = jjtree.popNode(); ASTVnil vnil = new ASTVnil(MiniJajaTreeConstants.JJTVNIL); vnil.jjtSetParent(ln.jjtGetParent()); jjtree.pushNode(vnil);}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

private void decl() : {}
{
    typemeth() ident() decl1()           |
    <FINAL> type() ident()/*@bgen(jjtree) #Cst( 3) */
                           {
                             ASTCst jjtn001 = new ASTCst(JJTCST);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
                           }
                           try {
/*@egen*/ vexp()/*@bgen(jjtree)*/
                           } catch (Throwable jjte001) {
                             if (jjtc001) {
                               jjtree.clearNodeScope(jjtn001);
                               jjtc001 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte001 instanceof RuntimeException) {
                               throw (RuntimeException)jjte001;
                             }
                             if (jjte001 instanceof ParseException) {
                               throw (ParseException)jjte001;
                             }
                             throw (Error)jjte001;
                           } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001,  3);
                             }
                           }
/*@egen*/        
}

private void decl1() : {}
{
    <LPAR> entetes() <RPAR> <LCBRACKET> vars() instrs()/*@bgen(jjtree) #Methode( 5) */
                                                        {
                                                          ASTMethode jjtn001 = new ASTMethode(JJTMETHODE);
                                                          boolean jjtc001 = true;
                                                          jjtree.openNodeScope(jjtn001);
                                                        }
                                                        try {
/*@egen*/ <RCBRACKET>/*@bgen(jjtree)*/
                                                        } finally {
                                                          if (jjtc001) {
                                                            jjtree.closeNodeScope(jjtn001,  5);
                                                          }
                                                        }
/*@egen*/             |
    var1()
}

private void vars()       : {/*@bgen(jjtree) Vars */
  ASTVars jjtn000 = new ASTVars(JJTVARS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Vars */
    try {
/*@egen*/
    var() <SEMICOLON> vars() |
    empty()/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {Node ln = jjtree.popNode(); ASTVnil vnil = new ASTVnil(MiniJajaTreeConstants.JJTVNIL); vnil.jjtSetParent(ln.jjtGetParent()); jjtree.pushNode(vnil);}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

private void var() : {}
{
    typemeth() ident() var1()            |
    <FINAL> type() ident()/*@bgen(jjtree) #Cst( 3) */
                           {
                             ASTCst jjtn001 = new ASTCst(JJTCST);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
                           }
                           try {
/*@egen*/ vexp()/*@bgen(jjtree)*/
                           } catch (Throwable jjte001) {
                             if (jjtc001) {
                               jjtree.clearNodeScope(jjtn001);
                               jjtc001 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte001 instanceof RuntimeException) {
                               throw (RuntimeException)jjte001;
                             }
                             if (jjte001 instanceof ParseException) {
                               throw (ParseException)jjte001;
                             }
                             throw (Error)jjte001;
                           } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001,  3);
                             }
                           }
/*@egen*/        
}

private void var1() : {}
{
     <LBRACKET> exp()/*@bgen(jjtree) #Tableau( 3) */
                      {
                        ASTTableau jjtn001 = new ASTTableau(JJTTABLEAU);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                      }
                      try {
/*@egen*/ <RBRACKET>/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  3);
                        }
                      }
/*@egen*/             |/*@bgen(jjtree) #Var( 3) */
     {
       ASTVar jjtn002 = new ASTVar(JJTVAR);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
     }
     try {
/*@egen*/
     vexp()/*@bgen(jjtree)*/
     } catch (Throwable jjte002) {
       if (jjtc002) {
         jjtree.clearNodeScope(jjtn002);
         jjtc002 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte002 instanceof RuntimeException) {
         throw (RuntimeException)jjte002;
       }
       if (jjte002 instanceof ParseException) {
         throw (ParseException)jjte002;
       }
       throw (Error)jjte002;
     } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002,  3);
       }
     }
/*@egen*/        
}

private void vexp() : {}
{
    <ASSIGN> exp() |/*@bgen(jjtree) Omega */
    {
      ASTOmega jjtn001 = new ASTOmega(JJTOMEGA);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    empty()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/       
}


private void methmain()          : {/*@bgen(jjtree) #Main( 2) */
  ASTMain jjtn000 = new ASTMain(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #Main( 2) */
    try {
/*@egen*/
    <MAIN> <LCBRACKET> vars() instrs() <RCBRACKET>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  2);
      }
    }
/*@egen*/
}

private void entetes()          : {/*@bgen(jjtree) Entetes */
  ASTEntetes jjtn000 = new ASTEntetes(JJTENTETES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Entetes */
    try {
/*@egen*/
    entete() entetes1() |
    empty()/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {Node ln = jjtree.popNode(); ASTEnil enil = new ASTEnil(MiniJajaTreeConstants.JJTENIL); enil.jjtSetParent(ln.jjtGetParent()); jjtree.pushNode(enil);}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

private void entetes1() : {}
{
    <COMMA> entetes() |/*@bgen(jjtree) Enil */
    {
      ASTEnil jjtn001 = new ASTEnil(JJTENIL);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    empty()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/      
}

private void entete() : {}
{
    type()/*@bgen(jjtree) #Entete( 2) */
           {
             ASTEntete jjtn001 = new ASTEntete(JJTENTETE);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
           }
           try {
/*@egen*/ ident()/*@bgen(jjtree)*/
           } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               throw (RuntimeException)jjte001;
             }
             if (jjte001 instanceof ParseException) {
               throw (ParseException)jjte001;
             }
             throw (Error)jjte001;
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  2);
             }
           }
/*@egen*/           
}

private void instrs()         : {/*@bgen(jjtree) Instrs */
  ASTInstrs jjtn000 = new ASTInstrs(JJTINSTRS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Instrs */
    try {
/*@egen*/
    instr() <SEMICOLON> instrs()  |
    empty()/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {Node ln = jjtree.popNode(); ASTInil inil = new ASTInil(MiniJajaTreeConstants.JJTINIL); inil.jjtSetParent(ln.jjtGetParent()); jjtree.pushNode(inil);}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

private void instr() : {}
{
    ident() instr2()                                                        |
    <RETURN>/*@bgen(jjtree) Retour */
             {
               ASTRetour jjtn001 = new ASTRetour(JJTRETOUR);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
             }
             try {
/*@egen*/ exp()/*@bgen(jjtree)*/
             } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 throw (RuntimeException)jjte001;
               }
               if (jjte001 instanceof ParseException) {
                 throw (ParseException)jjte001;
               }
               throw (Error)jjte001;
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001, true);
               }
             }
/*@egen*/                                                          |
    <WRITE> <LPAR> instr3()/*@bgen(jjtree) #Ecrire( 1) */
                            {
                              ASTEcrire jjtn002 = new ASTEcrire(JJTECRIRE);
                              boolean jjtc002 = true;
                              jjtree.openNodeScope(jjtn002);
                            }
                            try {
/*@egen*/ <RPAR>/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002,  1);
                              }
                            }
/*@egen*/                                          |
    <WRITELN> <LPAR> instr3()/*@bgen(jjtree) #EcrireLn( 1) */
                              {
                                ASTEcrireLn jjtn003 = new ASTEcrireLn(JJTECRIRELN);
                                boolean jjtc003 = true;
                                jjtree.openNodeScope(jjtn003);
                              }
                              try {
/*@egen*/ <RPAR>/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc003) {
                                  jjtree.closeNodeScope(jjtn003,  1);
                                }
                              }
/*@egen*/                                        |
    <IF> <LPAR> exp() <RPAR> <LCBRACKET> instrs() <RCBRACKET>/*@bgen(jjtree) #Si( 3) */
                                                              {
                                                                ASTSi jjtn004 = new ASTSi(JJTSI);
                                                                boolean jjtc004 = true;
                                                                jjtree.openNodeScope(jjtn004);
                                                              }
                                                              try {
/*@egen*/ ELSE()/*@bgen(jjtree)*/
                                                              } catch (Throwable jjte004) {
                                                                if (jjtc004) {
                                                                  jjtree.clearNodeScope(jjtn004);
                                                                  jjtc004 = false;
                                                                } else {
                                                                  jjtree.popNode();
                                                                }
                                                                if (jjte004 instanceof RuntimeException) {
                                                                  throw (RuntimeException)jjte004;
                                                                }
                                                                if (jjte004 instanceof ParseException) {
                                                                  throw (ParseException)jjte004;
                                                                }
                                                                throw (Error)jjte004;
                                                              } finally {
                                                                if (jjtc004) {
                                                                  jjtree.closeNodeScope(jjtn004,  3);
                                                                }
                                                              }
/*@egen*/        |
    <WHILE> <LPAR> exp() <RPAR> <LCBRACKET> instrs()/*@bgen(jjtree) #TantQue( 2) */
                                                     {
                                                       ASTTantQue jjtn005 = new ASTTantQue(JJTTANTQUE);
                                                       boolean jjtc005 = true;
                                                       jjtree.openNodeScope(jjtn005);
                                                     }
                                                     try {
/*@egen*/ <RCBRACKET>/*@bgen(jjtree)*/
                                                     } finally {
                                                       if (jjtc005) {
                                                         jjtree.closeNodeScope(jjtn005,  2);
                                                       }
                                                     }
/*@egen*/            
}

private void instr1() : {}
{
    <ASSIGN>/*@bgen(jjtree) #Affectation( 2) */
             {
               ASTAffectation jjtn001 = new ASTAffectation(JJTAFFECTATION);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
             }
             try {
/*@egen*/ exp()/*@bgen(jjtree)*/
             } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 throw (RuntimeException)jjte001;
               }
               if (jjte001 instanceof ParseException) {
                 throw (ParseException)jjte001;
               }
               throw (Error)jjte001;
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  2);
               }
             }
/*@egen*/                     |
    <ASSIGN_INCREMENT>/*@bgen(jjtree) #Somme( 2) */
                       {
                         ASTSomme jjtn002 = new ASTSomme(JJTSOMME);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
                       }
                       try {
/*@egen*/ exp()/*@bgen(jjtree)*/
                       } catch (Throwable jjte002) {
                         if (jjtc002) {
                           jjtree.clearNodeScope(jjtn002);
                           jjtc002 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte002 instanceof RuntimeException) {
                           throw (RuntimeException)jjte002;
                         }
                         if (jjte002 instanceof ParseException) {
                           throw (ParseException)jjte002;
                         }
                         throw (Error)jjte002;
                       } finally {
                         if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002,  2);
                         }
                       }
/*@egen*/           |/*@bgen(jjtree) #Increment( 1) */
    {
      ASTIncrement jjtn003 = new ASTIncrement(JJTINCREMENT);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
    }
    try {
/*@egen*/
    <INCREMENT>/*@bgen(jjtree)*/
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003,  1);
      }
    }
/*@egen*/              
}

private void instr2() : {}
{
    <LPAR> listexp()/*@bgen(jjtree) #AppelI( 2) */
                     {
                       ASTAppelI jjtn001 = new ASTAppelI(JJTAPPELI);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                     }
                     try {
/*@egen*/ <RPAR>/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  2);
                       }
                     }
/*@egen*/            |
    [ident2()] instr1()
}

private void instr3() : {}
{
    ident() |
    chaine()
}

private void ELSE() : {}
{
    <ELSE> <LCBRACKET> instrs() <RCBRACKET> |/*@bgen(jjtree) Inil */
    {
      ASTInil jjtn001 = new ASTInil(JJTINIL);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    empty()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/      
}

private void listexp() : {}
{
    exp()/*@bgen(jjtree) #ListExp( 2) */
          {
            ASTListExp jjtn001 = new ASTListExp(JJTLISTEXP);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/ listexp1()/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
            }
          }
/*@egen*/             |/*@bgen(jjtree) Exnil */
    {
      ASTExnil jjtn002 = new ASTExnil(JJTEXNIL);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/
    empty()/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/       
}

private void listexp1() : {}
{
    <COMMA> exp()/*@bgen(jjtree) #ListExp( 2) */
                  {
                    ASTListExp jjtn001 = new ASTListExp(JJTLISTEXP);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                  }
                  try {
/*@egen*/ listexp1()/*@bgen(jjtree)*/
                  } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      throw (RuntimeException)jjte001;
                    }
                    if (jjte001 instanceof ParseException) {
                      throw (ParseException)jjte001;
                    }
                    throw (Error)jjte001;
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  2);
                    }
                  }
/*@egen*/             |/*@bgen(jjtree) Exnil */
    {
      ASTExnil jjtn002 = new ASTExnil(JJTEXNIL);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/
    empty()/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/       
}

private void exp() : {}
{
    <NOT>/*@bgen(jjtree) Not */
          {
            ASTNot jjtn001 = new ASTNot(JJTNOT);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/ exp1()/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
          }
/*@egen*/      |
    exp1() exp3()
}

private void exp3() : {}
{
    (
        <AND>/*@bgen(jjtree) #Et( 2) */
              {
                ASTEt jjtn001 = new ASTEt(JJTET);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*/ exp1()/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                }
              }
/*@egen*/        |
        <OR>/*@bgen(jjtree) #Ou( 2) */
             {
               ASTOu jjtn002 = new ASTOu(JJTOU);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
             }
             try {
/*@egen*/ exp1()/*@bgen(jjtree)*/
             } catch (Throwable jjte002) {
               if (jjtc002) {
                 jjtree.clearNodeScope(jjtn002);
                 jjtc002 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte002 instanceof RuntimeException) {
                 throw (RuntimeException)jjte002;
               }
               if (jjte002 instanceof ParseException) {
                 throw (ParseException)jjte002;
               }
               throw (Error)jjte002;
             } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002,  2);
               }
             }
/*@egen*/       
    ) exp3() |
    {}
}

private void exp1() : {}
{
    exp2() exp4()
}

private void exp4() : {}
{
    (
        <EQUAL>/*@bgen(jjtree) #Eq( 2) */
                {
                  ASTEq jjtn001 = new ASTEq(JJTEQ);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/ exp2()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
                }
/*@egen*/        |
        <SUP>/*@bgen(jjtree) #Sup( 2) */
              {
                ASTSup jjtn002 = new ASTSup(JJTSUP);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
              }
              try {
/*@egen*/ exp2()/*@bgen(jjtree)*/
              } catch (Throwable jjte002) {
                if (jjtc002) {
                  jjtree.clearNodeScope(jjtn002);
                  jjtc002 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte002 instanceof RuntimeException) {
                  throw (RuntimeException)jjte002;
                }
                if (jjte002 instanceof ParseException) {
                  throw (ParseException)jjte002;
                }
                throw (Error)jjte002;
              } finally {
                if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002,  2);
                }
              }
/*@egen*/        
    ) exp4() |
    {}
}

private void exp2() : {}
{
    terme() exp5() |
    <SUB>/*@bgen(jjtree) Neg */
          {
            ASTNeg jjtn001 = new ASTNeg(JJTNEG);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/ terme()/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
          }
/*@egen*/     
}


private void exp5() : {}
{
    (
        <ADD>/*@bgen(jjtree) #Add( 2) */
              {
                ASTAdd jjtn001 = new ASTAdd(JJTADD);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*/ terme()/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                }
              }
/*@egen*/         |
        <SUB>/*@bgen(jjtree) #Sub( 2) */
              {
                ASTSub jjtn002 = new ASTSub(JJTSUB);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
              }
              try {
/*@egen*/ terme()/*@bgen(jjtree)*/
              } catch (Throwable jjte002) {
                if (jjtc002) {
                  jjtree.clearNodeScope(jjtn002);
                  jjtc002 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte002 instanceof RuntimeException) {
                  throw (RuntimeException)jjte002;
                }
                if (jjte002 instanceof ParseException) {
                  throw (ParseException)jjte002;
                }
                throw (Error)jjte002;
              } finally {
                if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002,  2);
                }
              }
/*@egen*/        
    ) exp5() |
    {}
}

private void terme() : {}
{
    fact() terme1()
}

private void terme1() : {}
{
    (
        <MUL>/*@bgen(jjtree) #Mul( 2) */
              {
                ASTMul jjtn001 = new ASTMul(JJTMUL);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*/ fact()/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                }
              }
/*@egen*/         |
        <DIV>/*@bgen(jjtree) #Div( 2) */
              {
                ASTDiv jjtn002 = new ASTDiv(JJTDIV);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
              }
              try {
/*@egen*/ fact()/*@bgen(jjtree)*/
              } catch (Throwable jjte002) {
                if (jjtc002) {
                  jjtree.clearNodeScope(jjtn002);
                  jjtc002 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte002 instanceof RuntimeException) {
                  throw (RuntimeException)jjte002;
                }
                if (jjte002 instanceof ParseException) {
                  throw (ParseException)jjte002;
                }
                throw (Error)jjte002;
              } finally {
                if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002,  2);
                }
              }
/*@egen*/        
    ) terme1() |
    {}
}

private void fact() : {}
{
    ident() fact1()                          |
    <LENGTH> <LPAR> ident()/*@bgen(jjtree) #Longeur( 1) */
                            {
                              ASTLongeur jjtn001 = new ASTLongeur(JJTLONGEUR);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                            }
                            try {
/*@egen*/ <RPAR>/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  1);
                              }
                            }
/*@egen*/              |/*@bgen(jjtree) Vrai */
    {
      ASTVrai jjtn002 = new ASTVrai(JJTVRAI);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/
    <TRUE>/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/                                   |/*@bgen(jjtree) Faux */
    {
      ASTFaux jjtn003 = new ASTFaux(JJTFAUX);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
    }
    try {
/*@egen*/
    <FALSE>/*@bgen(jjtree)*/
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
      }
    }
/*@egen*/                                  |
    nbre()                                   |
    <LPAR> exp()/*@bgen(jjtree) #Exp( 1) */
                 {
                   ASTExp jjtn004 = new ASTExp(JJTEXP);
                   boolean jjtc004 = true;
                   jjtree.openNodeScope(jjtn004);
                 }
                 try {
/*@egen*/ <RPAR>/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc004) {
                     jjtree.closeNodeScope(jjtn004,  1);
                   }
                 }
/*@egen*/        
}

private void fact1() : {}
{
    <LPAR> listexp()/*@bgen(jjtree) #AppelE( 2) */
                     {
                       ASTAppelE jjtn001 = new ASTAppelE(JJTAPPELE);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                     }
                     try {
/*@egen*/ <RPAR>/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  2);
                       }
                     }
/*@egen*/            |
    [ident2()]
}

private void ident2() : {}
{
    <LBRACKET> exp()/*@bgen(jjtree) #Tab( 2) */
                     {
                       ASTTab jjtn001 = new ASTTab(JJTTAB);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                     }
                     try {
/*@egen*/ <RBRACKET>/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  2);
                       }
                     }
/*@egen*/        
}

private void typemeth() : {}
{/*@bgen(jjtree) Rien */
    {
      ASTRien jjtn001 = new ASTRien(JJTRIEN);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    <VOID>/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/       |
    type()
}

private void type() : {}
{/*@bgen(jjtree) Entier */
    {
      ASTEntier jjtn001 = new ASTEntier(JJTENTIER);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    <INT>/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/             |/*@bgen(jjtree) Booleen */
    {
      ASTBooleen jjtn002 = new ASTBooleen(JJTBOOLEEN);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/
    <BOOLEAN>/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/         
}

private void empty() : {}
{
    {}
}

void nbre()       : {/*@bgen(jjtree) Nbre */
                     ASTNbre jjtn000 = new ASTNbre(JJTNBRE);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/int x; Token t;} {/*@bgen(jjtree) Nbre */
        try {
/*@egen*/
	t = <NUMBER>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {
		try { x = Integer.parseInt(t.image);
		} catch (NumberFormatException ee) {
		   System.err.println(ee.getMessage());
		   x = 0;
		}
		jjtn000.jjtSetValue(x);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

private void chaine()         : {/*@bgen(jjtree) Chaine */
                                 ASTChaine jjtn000 = new ASTChaine(JJTCHAINE);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Chaine */
  try {
/*@egen*/
  t = <STRING>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


/**
* Definitions of null nodes
*/
private void toIgnoreVnil()       : {/*@bgen(jjtree) Vnil */
  ASTVnil jjtn000 = new ASTVnil(JJTVNIL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Vnil */
    try {
/*@egen*/
    empty()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

private void toIgnoreEnil()       : {/*@bgen(jjtree) Enil */
  ASTEnil jjtn000 = new ASTEnil(JJTENIL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Enil */
    try {
/*@egen*/
    empty()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

private void toIgnoreInil()       : {/*@bgen(jjtree) Inil */
  ASTInil jjtn000 = new ASTInil(JJTINIL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Inil */
    try {
/*@egen*/
    empty()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

private void toIgnoreExnil()        : {/*@bgen(jjtree) Exnil */
  ASTExnil jjtn000 = new ASTExnil(JJTEXNIL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Exnil */
    try {
/*@egen*/
    empty()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
