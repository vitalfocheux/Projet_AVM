/* MiniJaja.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. MiniJaja.java */
package fr.m1comp5.Analyzer.mjj.generated;

public class MiniJaja/*@bgen(jjtree)*/implements MiniJajaTreeConstants, MiniJajaConstants {/*@bgen(jjtree)*/
  protected JJTMiniJajaState jjtree = new JJTMiniJajaState();

  final public SimpleNode start() throws ParseException {/*@bgen(jjtree) root */
  ASTroot jjtn000 = new ASTroot(JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      classe();
jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
}

  final private void classe() throws ParseException {/*@bgen(jjtree) #classe( 3) */
  ASTclasse jjtn000 = new ASTclasse(JJTCLASSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CLASS);
      ident();
      jj_consume_token(LCBRACKET);
      decls();
      methmain();
      jj_consume_token(RCBRACKET);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  3);
      }
    }
}

  final private void ident() throws ParseException {/*@bgen(jjtree) ident */
                               ASTident jjtn000 = new ASTident(JJTIDENT);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
jjtn000.value = t.image;
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final private void decls() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VOID:
    case INT:
    case BOOLEAN:
    case FINAL:{
      decl();
      decls1();
      break;
      }
    default:
      jj_la1[0] = jj_gen;
ASTvnil jjtn001 = new ASTvnil(JJTVNIL);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        empty();
      } catch (Throwable jjte001) {
if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
    }
}

  final private void decls1() throws ParseException {
    jj_consume_token(SEMICOLON);
ASTdecls jjtn001 = new ASTdecls(JJTDECLS);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
    try {
      decls();
    } catch (Throwable jjte001) {
if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
    } finally {
if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
    }
}

  final private void decl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VOID:
    case INT:
    case BOOLEAN:{
      typemeth();
      ident();
      decl1();
      break;
      }
    case FINAL:{
      jj_consume_token(FINAL);
      type();
      ident();
ASTcst jjtn001 = new ASTcst(JJTCST);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
      try {
        vexp();
      } catch (Throwable jjte001) {
if (jjtc001) {
                               jjtree.clearNodeScope(jjtn001);
                               jjtc001 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte001 instanceof RuntimeException) {
                               {if (true) throw (RuntimeException)jjte001;}
                             }
                             if (jjte001 instanceof ParseException) {
                               {if (true) throw (ParseException)jjte001;}
                             }
                             {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001,  3);
                             }
      }
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final private void decl1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAR:{
      jj_consume_token(LPAR);
      entetes();
      jj_consume_token(RPAR);
      jj_consume_token(LCBRACKET);
      vars();
      instrs();
ASTmethode jjtn001 = new ASTmethode(JJTMETHODE);
                                                          boolean jjtc001 = true;
                                                          jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(RCBRACKET);
      } finally {
if (jjtc001) {
                                                            jjtree.closeNodeScope(jjtn001,  5);
                                                          }
      }
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      var1();
    }
}

  final private void vars() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VOID:
    case INT:
    case BOOLEAN:
    case FINAL:{
      var();
      jj_consume_token(SEMICOLON);
ASTvars jjtn001 = new ASTvars(JJTVARS);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
      try {
        vars();
      } catch (Throwable jjte001) {
if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte001;}
                        }
                        if (jjte001 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte001;}
                        }
                        {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  2);
                        }
      }
      break;
      }
    default:
      jj_la1[3] = jj_gen;
ASTvnil jjtn002 = new ASTvnil(JJTVNIL);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        empty();
      } catch (Throwable jjte002) {
if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte002;}
      }
      if (jjte002 instanceof ParseException) {
        {if (true) throw (ParseException)jjte002;}
      }
      {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
      }
    }
}

  final private void var() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VOID:
    case INT:
    case BOOLEAN:{
      typemeth();
      ident();
      var1();
      break;
      }
    case FINAL:{
      jj_consume_token(FINAL);
      type();
      ident();
ASTcst jjtn001 = new ASTcst(JJTCST);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
      try {
        vexp();
      } catch (Throwable jjte001) {
if (jjtc001) {
                               jjtree.clearNodeScope(jjtn001);
                               jjtc001 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte001 instanceof RuntimeException) {
                               {if (true) throw (RuntimeException)jjte001;}
                             }
                             if (jjte001 instanceof ParseException) {
                               {if (true) throw (ParseException)jjte001;}
                             }
                             {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001,  3);
                             }
      }
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final private void var1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACKET:{
      jj_consume_token(LBRACKET);
      exp();
ASTtableau jjtn001 = new ASTtableau(JJTTABLEAU);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(RBRACKET);
      } finally {
if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  3);
                        }
      }
      break;
      }
    default:
      jj_la1[5] = jj_gen;
ASTvar jjtn002 = new ASTvar(JJTVAR);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
      try {
        vexp();
      } catch (Throwable jjte002) {
if (jjtc002) {
         jjtree.clearNodeScope(jjtn002);
         jjtc002 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte002 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte002;}
       }
       if (jjte002 instanceof ParseException) {
         {if (true) throw (ParseException)jjte002;}
       }
       {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
         jjtree.closeNodeScope(jjtn002,  3);
       }
      }
    }
}

  final private void vexp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSIGN:{
      jj_consume_token(ASSIGN);
      exp();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
ASTomega jjtn001 = new ASTomega(JJTOMEGA);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        empty();
      } catch (Throwable jjte001) {
if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
    }
}

  final private void methmain() throws ParseException {/*@bgen(jjtree) #main( 2) */
  ASTmain jjtn000 = new ASTmain(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MAIN);
      jj_consume_token(LCBRACKET);
      vars();
      instrs();
      jj_consume_token(RCBRACKET);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  2);
      }
    }
}

  final private void entetes() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case BOOLEAN:{
      entete();
      entetes1();
      break;
      }
    default:
      jj_la1[7] = jj_gen;
ASTenil jjtn001 = new ASTenil(JJTENIL);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        empty();
      } catch (Throwable jjte001) {
if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
    }
}

  final private void entetes1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
ASTentetes jjtn001 = new ASTentetes(JJTENTETES);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
      try {
        entetes();
      } catch (Throwable jjte001) {
if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
              }
      }
      break;
      }
    default:
      jj_la1[8] = jj_gen;
ASTenil jjtn002 = new ASTenil(JJTENIL);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        empty();
      } catch (Throwable jjte002) {
if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte002;}
      }
      if (jjte002 instanceof ParseException) {
        {if (true) throw (ParseException)jjte002;}
      }
      {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
      }
    }
}

  final private void entete() throws ParseException {
    type();
ASTentete jjtn001 = new ASTentete(JJTENTETE);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
    try {
      ident();
    } catch (Throwable jjte001) {
if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte001;}
             }
             if (jjte001 instanceof ParseException) {
               {if (true) throw (ParseException)jjte001;}
             }
             {if (true) throw (Error)jjte001;}
    } finally {
if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  2);
             }
    }
}

  final private void instrs() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WHILE:
    case RETURN:
    case WRITE:
    case WRITELN:
    case IF:
    case IDENTIFIER:{
      instr();
      instrs1();
      break;
      }
    default:
      jj_la1[9] = jj_gen;
ASTinil jjtn001 = new ASTinil(JJTINIL);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        empty();
      } catch (Throwable jjte001) {
if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
    }
}

  final private void instrs1() throws ParseException {
    jj_consume_token(SEMICOLON);
ASTinstrs jjtn001 = new ASTinstrs(JJTINSTRS);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
    try {
      instrs();
    } catch (Throwable jjte001) {
if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
    } finally {
if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
    }
}

  final private void instr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      ident();
      instr2();
      break;
      }
    case RETURN:{
      jj_consume_token(RETURN);
ASTretour jjtn001 = new ASTretour(JJTRETOUR);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
      try {
        exp();
      } catch (Throwable jjte001) {
if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte001;}
               }
               if (jjte001 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte001;}
               }
               {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001, true);
               }
      }
      break;
      }
    case WRITE:{
      jj_consume_token(WRITE);
      jj_consume_token(LPAR);
      instr3();
ASTecrire jjtn002 = new ASTecrire(JJTECRIRE);
                              boolean jjtc002 = true;
                              jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(RPAR);
      } finally {
if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002,  1);
                              }
      }
      break;
      }
    case WRITELN:{
      jj_consume_token(WRITELN);
      jj_consume_token(LPAR);
      instr3();
ASTecrireln jjtn003 = new ASTecrireln(JJTECRIRELN);
                                boolean jjtc003 = true;
                                jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(RPAR);
      } finally {
if (jjtc003) {
                                  jjtree.closeNodeScope(jjtn003,  1);
                                }
      }
      break;
      }
    case IF:{
      jj_consume_token(IF);
      jj_consume_token(LPAR);
      exp();
      jj_consume_token(RPAR);
      jj_consume_token(LCBRACKET);
      instrs();
      jj_consume_token(RCBRACKET);
ASTsi jjtn004 = new ASTsi(JJTSI);
                                                                boolean jjtc004 = true;
                                                                jjtree.openNodeScope(jjtn004);
      try {
        ELSE();
      } catch (Throwable jjte004) {
if (jjtc004) {
                                                                  jjtree.clearNodeScope(jjtn004);
                                                                  jjtc004 = false;
                                                                } else {
                                                                  jjtree.popNode();
                                                                }
                                                                if (jjte004 instanceof RuntimeException) {
                                                                  {if (true) throw (RuntimeException)jjte004;}
                                                                }
                                                                if (jjte004 instanceof ParseException) {
                                                                  {if (true) throw (ParseException)jjte004;}
                                                                }
                                                                {if (true) throw (Error)jjte004;}
      } finally {
if (jjtc004) {
                                                                  jjtree.closeNodeScope(jjtn004,  3);
                                                                }
      }
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      jj_consume_token(LPAR);
      exp();
      jj_consume_token(RPAR);
      jj_consume_token(LCBRACKET);
      instrs();
ASTtantque jjtn005 = new ASTtantque(JJTTANTQUE);
                                                       boolean jjtc005 = true;
                                                       jjtree.openNodeScope(jjtn005);
      try {
        jj_consume_token(RCBRACKET);
      } finally {
if (jjtc005) {
                                                         jjtree.closeNodeScope(jjtn005,  2);
                                                       }
      }
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final private void instr1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSIGN:{
      jj_consume_token(ASSIGN);
ASTaffectation jjtn001 = new ASTaffectation(JJTAFFECTATION);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
      try {
        exp();
      } catch (Throwable jjte001) {
if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte001;}
               }
               if (jjte001 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte001;}
               }
               {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  2);
               }
      }
      break;
      }
    case ASSIGN_INCREMENT:{
      jj_consume_token(ASSIGN_INCREMENT);
ASTsomme jjtn002 = new ASTsomme(JJTSOMME);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
      try {
        exp();
      } catch (Throwable jjte002) {
if (jjtc002) {
                           jjtree.clearNodeScope(jjtn002);
                           jjtc002 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte002 instanceof RuntimeException) {
                           {if (true) throw (RuntimeException)jjte002;}
                         }
                         if (jjte002 instanceof ParseException) {
                           {if (true) throw (ParseException)jjte002;}
                         }
                         {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002,  2);
                         }
      }
      break;
      }
    case INCREMENT:{
ASTincrement jjtn003 = new ASTincrement(JJTINCREMENT);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(INCREMENT);
      } finally {
if (jjtc003) {
        jjtree.closeNodeScope(jjtn003,  1);
      }
      }
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final private void instr2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAR:{
      jj_consume_token(LPAR);
      listexp();
ASTappelI jjtn001 = new ASTappelI(JJTAPPELI);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(RPAR);
      } finally {
if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  2);
                       }
      }
      break;
      }
    case INCREMENT:
    case ASSIGN_INCREMENT:
    case ASSIGN:
    case LBRACKET:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        ident2();
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      instr1();
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final private void instr3() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      ident();
      break;
      }
    case STRING:{
      chaine();
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final private void ELSE() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      jj_consume_token(LCBRACKET);
      instrs();
      jj_consume_token(RCBRACKET);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
ASTinil jjtn001 = new ASTinil(JJTINIL);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        empty();
      } catch (Throwable jjte001) {
if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
    }
}

  final private void listexp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:
    case FALSE:
    case LENGTH:
    case SUB:
    case NOT:
    case LPAR:
    case IDENTIFIER:
    case NUMBER:{
      exp();
ASTlistexp jjtn001 = new ASTlistexp(JJTLISTEXP);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
      try {
        listexp1();
      } catch (Throwable jjte001) {
if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
            }
      }
      break;
      }
    default:
      jj_la1[16] = jj_gen;
ASTexnil jjtn002 = new ASTexnil(JJTEXNIL);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        empty();
      } catch (Throwable jjte002) {
if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte002;}
      }
      if (jjte002 instanceof ParseException) {
        {if (true) throw (ParseException)jjte002;}
      }
      {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
      }
    }
}

  final private void listexp1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      exp();
ASTlistexp jjtn001 = new ASTlistexp(JJTLISTEXP);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
      try {
        listexp1();
      } catch (Throwable jjte001) {
if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte001;}
                    }
                    if (jjte001 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte001;}
                    }
                    {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  2);
                    }
      }
      break;
      }
    default:
      jj_la1[17] = jj_gen;
ASTexnil jjtn002 = new ASTexnil(JJTEXNIL);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        empty();
      } catch (Throwable jjte002) {
if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte002;}
      }
      if (jjte002 instanceof ParseException) {
        {if (true) throw (ParseException)jjte002;}
      }
      {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
      }
    }
}

  final private void exp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
ASTnot jjtn001 = new ASTnot(JJTNOT);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
      try {
        exp1();
      } catch (Throwable jjte001) {
if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
      }
      break;
      }
    case TRUE:
    case FALSE:
    case LENGTH:
    case SUB:
    case LPAR:
    case IDENTIFIER:
    case NUMBER:{
      exp1();
      exp3();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final private void exp3() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:
    case OR:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        jj_consume_token(AND);
        exp1();
ASTet jjtn001 = new ASTet(JJTET);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
        try {
          exp3();
        } catch (Throwable jjte001) {
if (jjtc001) {
                         jjtree.clearNodeScope(jjtn001);
                         jjtc001 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte001 instanceof RuntimeException) {
                         {if (true) throw (RuntimeException)jjte001;}
                       }
                       if (jjte001 instanceof ParseException) {
                         {if (true) throw (ParseException)jjte001;}
                       }
                       {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  2);
                       }
        }
        break;
        }
      case OR:{
        jj_consume_token(OR);
        exp1();
ASTou jjtn002 = new ASTou(JJTOU);
                      boolean jjtc002 = true;
                      jjtree.openNodeScope(jjtn002);
        try {
          exp3();
        } catch (Throwable jjte002) {
if (jjtc002) {
                        jjtree.clearNodeScope(jjtn002);
                        jjtc002 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte002 instanceof RuntimeException) {
                        {if (true) throw (RuntimeException)jjte002;}
                      }
                      if (jjte002 instanceof ParseException) {
                        {if (true) throw (ParseException)jjte002;}
                      }
                      {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002,  2);
                      }
        }
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      ;
    }
}

  final private void exp1() throws ParseException {
    exp2();
    exp4();
}

  final private void exp4() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SUP:
    case EQUAL:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUAL:{
        jj_consume_token(EQUAL);
ASTeq jjtn001 = new ASTeq(JJTEQ);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
        try {
          exp2();
        } catch (Throwable jjte001) {
if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
        }
        break;
        }
      case SUP:{
        jj_consume_token(SUP);
ASTsup jjtn002 = new ASTsup(JJTSUP);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
        try {
          exp2();
        } catch (Throwable jjte002) {
if (jjtc002) {
                  jjtree.clearNodeScope(jjtn002);
                  jjtc002 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte002 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte002;}
                }
                if (jjte002 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte002;}
                }
                {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002,  2);
                }
        }
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      ;
    }
}

  final private void exp2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:
    case FALSE:
    case LENGTH:
    case LPAR:
    case IDENTIFIER:
    case NUMBER:{
      terme();
      exp5();
      break;
      }
    case SUB:{
      jj_consume_token(SUB);
ASTneg jjtn001 = new ASTneg(JJTNEG);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
      try {
        terme();
      } catch (Throwable jjte001) {
if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
      }
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final private void exp5() throws ParseException {
    exp2();
    exp5tail();
}

  final private void exp5tail() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ADD:
    case SUB:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ADD:{
        jj_consume_token(ADD);
ASTadd jjtn001 = new ASTadd(JJTADD);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
        try {
          exp5();
        } catch (Throwable jjte001) {
if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte001;}
                }
                if (jjte001 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte001;}
                }
                {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                }
        }
        break;
        }
      case SUB:{
        jj_consume_token(SUB);
ASTsub jjtn002 = new ASTsub(JJTSUB);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
        try {
          exp5();
        } catch (Throwable jjte002) {
if (jjtc002) {
                  jjtree.clearNodeScope(jjtn002);
                  jjtc002 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte002 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte002;}
                }
                if (jjte002 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte002;}
                }
                {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002,  2);
                }
        }
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      ;
    }
}

  final private void terme() throws ParseException {
    fact();
    terme1();
}

  final private void terme1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MUL:{
      jj_consume_token(MUL);
ASTmul jjtn001 = new ASTmul(JJTMUL);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
      try {
        terme();
      } catch (Throwable jjte001) {
if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
            }
      }
      break;
      }
    case DIV:{
      jj_consume_token(DIV);
ASTdiv jjtn002 = new ASTdiv(JJTDIV);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
      try {
        terme();
      } catch (Throwable jjte002) {
if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte002;}
            }
            if (jjte002 instanceof ParseException) {
              {if (true) throw (ParseException)jjte002;}
            }
            {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
              jjtree.closeNodeScope(jjtn002,  2);
            }
      }
      break;
      }
    default:
      jj_la1[26] = jj_gen;

    }
}

  final private void fact() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      ident();
      fact1();
      break;
      }
    case LENGTH:{
      jj_consume_token(LENGTH);
      jj_consume_token(LPAR);
      ident();
ASTlongeur jjtn001 = new ASTlongeur(JJTLONGEUR);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(RPAR);
      } finally {
if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  1);
                              }
      }
      break;
      }
    case TRUE:{
ASTvrai jjtn002 = new ASTvrai(JJTVRAI);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(TRUE);
      } finally {
if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
      }
      break;
      }
    case FALSE:{
ASTfaux jjtn003 = new ASTfaux(JJTFAUX);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(FALSE);
      } finally {
if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
      }
      }
      break;
      }
    case NUMBER:{
      nbre();
      break;
      }
    case LPAR:{
      jj_consume_token(LPAR);
      exp();
ASTexp jjtn004 = new ASTexp(JJTEXP);
                   boolean jjtc004 = true;
                   jjtree.openNodeScope(jjtn004);
      try {
        jj_consume_token(RPAR);
      } finally {
if (jjtc004) {
                     jjtree.closeNodeScope(jjtn004,  1);
                   }
      }
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final private void fact1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAR:{
      jj_consume_token(LPAR);
      listexp();
ASTappelE jjtn001 = new ASTappelE(JJTAPPELE);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(RPAR);
      } finally {
if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  2);
                       }
      }
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        ident2();
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        ;
      }
    }
}

  final private void ident2() throws ParseException {
    jj_consume_token(LBRACKET);
    exp();
ASTtab jjtn001 = new ASTtab(JJTTAB);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
    try {
      jj_consume_token(RBRACKET);
    } finally {
if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  2);
                       }
    }
}

  final private void typemeth() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VOID:{
ASTrien jjtn001 = new ASTrien(JJTRIEN);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(VOID);
      } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
      break;
      }
    case INT:
    case BOOLEAN:{
      type();
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final private void type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
ASTentier jjtn001 = new ASTentier(JJTENTIER);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(INT);
      } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
      break;
      }
    case BOOLEAN:{
ASTbooleen jjtn002 = new ASTbooleen(JJTBOOLEEN);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(BOOLEAN);
      } finally {
if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
      }
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final private void empty() throws ParseException {

}

  final public void nbre() throws ParseException {/*@bgen(jjtree) nbre */
                     ASTnbre jjtn000 = new ASTnbre(JJTNBRE);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);int x;
    try {
      jj_consume_token(NUMBER);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
try { x = Integer.parseInt(token.image);
                } catch (NumberFormatException ee) {
                   System.err.println("Error: " + token.image + " is not a number.");
                   x = 0;
                }
                jjtn000.jjtSetValue(x);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public void chaine() throws ParseException {/*@bgen(jjtree) chaine */
                         ASTchaine jjtn000 = new ASTchaine(JJTCHAINE);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(STRING);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
jjtn000.value = t.image;
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  /** Generated Token Manager. */
  public MiniJajaTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[32];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x1e00,0x1e00,0x0,0x1e00,0x1e00,0x0,0x0,0xc00,0x0,0x1f0000,0x1f0000,0x0,0x0,0x0,0x0,0x200000,0x8080e000,0x0,0x8080e000,0x30000000,0x30000000,0x44000000,0x44000000,0x80e000,0xc00000,0xc00000,0x3000000,0xe000,0x0,0x0,0xe00,0xc00,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x80,0x0,0x0,0x200,0x4,0x0,0x10,0x800,0x800,0x7,0x200,0x287,0x2800,0x0,0x1880,0x10,0x1880,0x0,0x0,0x0,0x0,0x1880,0x0,0x0,0x0,0x1880,0x200,0x80,0x0,0x0,};
	}

  /** Constructor with InputStream. */
  public MiniJaja(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniJaja(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new MiniJajaTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MiniJaja(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new MiniJajaTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new MiniJajaTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MiniJaja(MiniJajaTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MiniJajaTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[46];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 32; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 46; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
