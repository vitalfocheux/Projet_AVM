options {
    STATIC = false;
    NODE_DEFAULT_VOID = true;
    MULTI = true;
    VISITOR = true;
}

PARSER_BEGIN(MiniJaja)
package fr.m1comp5.Analyzer.mjj.generated;

import org.javacc.jjtree.JJTreeParserConstants;public class MiniJaja
{
}
PARSER_END(MiniJaja)

/* To skip */
SKIP :
{
    " "                                              |
    "\t"                                             |
    "\r"                                             |
    "\n"                                             |
    <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>        |
    <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">

 }

/* MiniJaja reserved keywords */
<DEFAULT> TOKEN :
{
    <CLASS: "class">     |
    <MAIN: "main">       |
    <VOID: "void">       |
    <INT: "int">         |
    <BOOLEAN: "boolean"> |
    <FINAL: "final">     |
    <TRUE: "true">       |
    <FALSE: "false">     |
    <LENGTH: "length">   |
    <WHILE: "while">     |
    <RETURN: "return">   |
    <WRITE: "write">     |
    <WRITELN: "writeln"> |
    <IF : "if">          |
    <ELSE : "else">
}

/* MiniJaja operator */
<DEFAULT> TOKEN :
{
    <ADD: "+">                  |
    <SUB: "-">                  |
    <DIV: "/">                  |
    <MUL: "*">                  |
    <SUP: ">">                  |
    <INF: "<">                  |
    <AND: "&&">                 |
    <OR: "||">                  |
    <EQUAL: "==">               |
    <NOT: "!">                  |
    <INCREMENT : "++">          |
    <ASSIGN_INCREMENT : "+=">   |
    <ASSIGN: "=">
}

/* MiniJaja Separator */
<DEFAULT> TOKEN :
{
    <SEMICOLON: ";">    |
    <COMMA: "," >       |
    <LCBRACKET: "{">    |
    <RCBRACKET: "}">    |
    <LPAR: "(">         |
    <RPAR: ")">         |
    <LBRACKET: "[">     |
    <RBRACKET: "]">
}

<DEFAULT> TOKEN :
{
    <IDENTIFIER: ["a"-"z", "A"-"Z"] (["a"-"z", "A"-"Z", "0"-"9", "_"])*> |
    <NUMBER: (["0"-"9"])+>                                               |
    <STRING:  "\"" (~["\""])* "\"">
}

public SimpleNode start() #Root : {}
{
    classe() {return jjtThis;}
}

private void classe() #Classe : {}
{
    <CLASS> ident() <LCBRACKET> decls() methmain() <RCBRACKET>
}

private void ident() #Ident : {Token t;}
{
    t = <IDENTIFIER> {jjtThis.value = t.image;}
}

private void decls() #Decls : {}
{
    decl() <SEMICOLON> decls() |
    empty() {Node ln = jjtree.popNode(); ASTVnil vnil = new ASTVnil(MiniJajaTreeConstants.JJTVNIL); vnil.jjtSetParent(ln.jjtGetParent()); jjtree.pushNode(vnil);}
}

private void decl() : {}
{
    typemeth() ident() decl1()           |
    <FINAL> type() ident() vexp() #Cst(3)
}

private void decl1() : {}
{
    <LPAR> entetes() <RPAR> <LCBRACKET> vars() instrs() <RCBRACKET> #Methode(5) |
    var1()
}

private void vars() #Vars : {}
{
    var() <SEMICOLON> vars() |
    empty() {Node ln = jjtree.popNode(); ASTVnil vnil = new ASTVnil(MiniJajaTreeConstants.JJTVNIL); vnil.jjtSetParent(ln.jjtGetParent()); jjtree.pushNode(vnil);}
}

private void var() : {}
{
    typemeth() ident() var1()            |
    <FINAL> type() ident() vexp() #Cst(3)
}

private void var1() : {}
{
     <LBRACKET> exp() <RBRACKET> #Tableau(3) |
     vexp() #Var(3)
}

private void vexp() : {}
{
    <ASSIGN> exp() |
    empty() #Omega
}


private void methmain() #Main(2) : {}
{
    <MAIN> <LCBRACKET> vars() instrs() <RCBRACKET>
}

private void entetes() #Entetes : {}
{
    entete() entetes1() |
    empty() {Node ln = jjtree.popNode(); ASTEnil enil = new ASTEnil(MiniJajaTreeConstants.JJTENIL); enil.jjtSetParent(ln.jjtGetParent()); jjtree.pushNode(enil);}
}

private void entetes1() : {}
{
    <COMMA> entetes() |
    empty() #Enil
}

private void entete() : {}
{
    type() ident() #Entete(2)
}

private void instrs() #Instrs : {}
{
    instr() <SEMICOLON> instrs()  |
    empty() {Node ln = jjtree.popNode(); ASTInil inil = new ASTInil(MiniJajaTreeConstants.JJTINIL); inil.jjtSetParent(ln.jjtGetParent()); jjtree.pushNode(inil);}
}

private void instr() : {}
{
    ident() instr2()                                                        |
    <RETURN> exp() #Retour                                                  |
    <WRITE> <LPAR> instr3() <RPAR> #Ecrire(1)                               |
    <WRITELN> <LPAR> instr3() <RPAR> #EcrireLn(1)                           |
    <IF> <LPAR> exp() <RPAR> <LCBRACKET> instrs() <RCBRACKET> ELSE() #Si(3) |
    <WHILE> <LPAR> exp() <RPAR> <LCBRACKET> instrs() <RCBRACKET> #TantQue(2)
}

private void instr1() : {}
{
    <ASSIGN> exp() #Affectation(2)     |
    <ASSIGN_INCREMENT> exp() #Somme(2) |
    <INCREMENT> #Increment(1)
}

private void instr2() : {}
{
    <LPAR> listexp() <RPAR> #AppelI(2) |
    [ident2()] instr1()
}

private void instr3() : {}
{
    ident() |
    chaine()
}

private void ELSE() : {}
{
    <ELSE> <LCBRACKET> instrs() <RCBRACKET> |
    empty() #Inil
}

private void listexp() : {}
{
    exp() listexp1() #ListExp(2) |
    empty() #Exnil
}

private void listexp1() : {}
{
    <COMMA> exp() listexp1() #ListExp(2) |
    empty() #Exnil
}

private void exp() : {}
{
    <NOT> exp1() #Not |
    exp1() exp3()
}

private void exp3() : {}
{
    (
        <AND> exp1() #Et(2) |
        <OR> exp1() #Ou(2)
    ) exp3() |
    {}
}

private void exp1() : {}
{
    exp2() exp4()
}

private void exp4() : {}
{
    (
        <EQUAL> exp2() #Eq(2) |
        <SUP> exp2() #Sup(2)
    ) exp4() |
    {}
}

private void exp2() : {}
{
    terme() exp5() |
    <SUB> terme() #Neg
}


private void exp5() : {}
{
    (
        <ADD> terme() #Add(2) |
        <SUB> terme() #Sub(2)
    ) exp5() |
    {}
}

private void terme() : {}
{
    fact() terme1()
}

private void terme1() : {}
{
    (
        <MUL> fact() #Mul(2) |
        <DIV> fact() #Div(2)
    ) terme1() |
    {}
}

private void fact() : {}
{
    ident() fact1()                          |
    <LENGTH> <LPAR> ident() <RPAR>  #Longeur(1) |
    <TRUE> #Vrai                             |
    <FALSE> #Faux                            |
    nbre()                                   |
    <LPAR> exp() <RPAR> #Exp(1)
}

private void fact1() : {}
{
    <LPAR> listexp() <RPAR> #AppelE(2) |
    [ident2()]
}

private void ident2() : {}
{
    <LBRACKET> exp() <RBRACKET> #Tab(2)
}

private void typemeth() : {}
{
    <VOID> #Rien |
    type()
}

private void type() : {}
{
    <INT> #Entier     |
    <BOOLEAN> #Booleen
}

private void empty() : {}
{
    {}
}

void nbre() #Nbre : {int x; Token t;} {
	t = <NUMBER> {
		try { x = Integer.parseInt(t.image);
		} catch (NumberFormatException ee) {
		   System.err.println(ee.getMessage());
		   x = 0;
		}
		jjtThis.jjtSetValue(x);
	}
}

private void chaine() #Chaine : {Token t;}
{
  t = <STRING> {jjtThis.value = t.image;}
}


/**
* Definitions of null nodes
*/
private void toIgnoreVnil() #Vnil : {}
{
    empty()
}

private void toIgnoreEnil() #Enil : {}
{
    empty()
}

private void toIgnoreInil() #Inil : {}
{
    empty()
}

private void toIgnoreExnil() #Exnil : {}
{
    empty()
}
